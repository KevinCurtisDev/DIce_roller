{"version":3,"sources":["Die.js","Dice.js","App.js","serviceWorker.js","index.js"],"names":["Die","dieNum","this","props","diceNum","dieClass","concat","rolling","react_default","a","createElement","className","Component","Dice","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","num1","num2","rollDice","bind","assertThisInitialized","_this2","numbers","randomNum1","Math","floor","random","randomNum2","setState","setTimeout","src_Die_0","onClick","disabled","App","src_Dice_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAaeA,0LARP,IAAMC,EAASC,KAAKC,MAAMC,QACpBC,EAAQ,eAAAC,OAAkBL,EAAlB,KAAAK,OAA4BJ,KAAKC,MAAMI,QAAU,QAAU,MACzE,OACIC,EAAAC,EAAAC,cAAA,KAAGC,UAAWN,WALRO,cCsCHC,qBApCX,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAW,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjB,KAAMC,KACDiB,MAAQ,CACTC,KAAM,MACNC,KAAM,QACNf,SAAS,GAEbO,EAAKS,SAAWT,EAAKS,SAASC,KAAdT,OAAAU,EAAA,EAAAV,CAAAD,IAPDA,0EAUR,IAAAY,EAAAxB,KACDyB,EAAU,CAAC,MAAO,MAAO,QAAS,OAAQ,OAAQ,OAClDC,EAAaC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC7BC,EAAaH,KAAKC,MAAsB,EAAhBD,KAAKE,UACnC7B,KAAK+B,SAAS,CAAEZ,KAAMM,EAAQC,GAAaN,KAAMK,EAAQK,GAAazB,SAAS,IAE/E2B,WAAW,WACPR,EAAKO,SAAS,CAAE1B,SAAS,KAC1B,sCAIH,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACyB,EAAD,CAAK/B,QAASF,KAAKkB,MAAMC,KAAMd,QAASL,KAAKkB,MAAMb,UACnDC,EAAAC,EAAAC,cAACyB,EAAD,CAAK/B,QAASF,KAAKkB,MAAME,KAAMf,QAASL,KAAKkB,MAAMb,WAEvDC,EAAAC,EAAAC,cAAA,UAAQ0B,QAASlC,KAAKqB,SAAUZ,UAAU,kBAAkB0B,SAAUnC,KAAKkB,MAAMb,SAC5EL,KAAKkB,MAAMb,QAAU,YAAc,sBA9BrCK,cCUJ0B,0LARX,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC6B,EAAD,cAJU3B,cCQE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8197f740.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Die.css'\n\nclass Die extends Component {\n    render() {\n        const dieNum = this.props.diceNum;\n        const dieClass = `fas fa-dice-${dieNum} ${this.props.rolling ? 'shake' : null}`\n        return (\n            <i className={dieClass}></i>\n        )\n    }\n}\n\nexport default Die;","import React, { Component } from 'react';\nimport Die from './Die';\nimport './Dice.css'\n\nclass Dice extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            num1: \"one\",\n            num2: \"three\",\n            rolling: false\n        }\n        this.rollDice = this.rollDice.bind(this);\n    }\n\n    rollDice() {\n        const numbers = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"];\n        const randomNum1 = Math.floor(Math.random() * 6);\n        const randomNum2 = Math.floor(Math.random() * 6);\n        this.setState({ num1: numbers[randomNum1], num2: numbers[randomNum2], rolling: true });\n\n        setTimeout(() => {\n            this.setState({ rolling: false });\n        }, 500);\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <Die diceNum={this.state.num1} rolling={this.state.rolling} />\n                    <Die diceNum={this.state.num2} rolling={this.state.rolling} />\n                </div>\n                <button onClick={this.rollDice} className=\"RollDice-button\" disabled={this.state.rolling}>\n                    {this.state.rolling ? \"Rolling..\" : \"Roll Dice!\"}\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Dice;","import React, { Component } from 'react';\nimport Dice from './Dice';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Dice />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}